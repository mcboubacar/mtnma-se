#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sun Apr 15 12:43 2025

@author: mboubacar
"""

import streamlit as st
import numpy as np
import pandas as pd
import plotly.express as px
import io
import datetime
from pathlib import Path
from PIL import Image  # Pour charger l'image
from utils.data import load_data
from utils.dataviz import vizAggrid


st.set_page_config(page_title="Suivi des Activit√©s MTNMA", layout="wide")
# Obtenir le chemin absolu du r√©pertoire du script
script_dir = Path(__file__).parent.resolve()

# ‚è±Ô∏è Constante pour les libell√©s
MAX_LIBELLE_LEN = 30
def tronquer(x): return x if len(x) < MAX_LIBELLE_LEN else x[:MAX_LIBELLE_LEN - 3] + "..."

# Charger le logo
logo = Image.open("SCEAU MAURITANIE.jpg")

col1, col2 = st.columns([1,4])
with col1:
    st.image(logo, width=80)  # Ajustez la largeur
with col2:
    st.title("üìä Tableau de bord du suivi-evaluation")

st.markdown(
    "<hr style='border: none; height: 2px; background-color: blue;'>",
    unsafe_allow_html=True
    )      

# Chargement des donn√©es

pathdatafile = Path("datafile.xlsx").resolve()
if pathdatafile.exists():
    timestamp_creation = pathdatafile.stat().st_ctime
    date_creation_file = datetime.datetime.fromtimestamp(timestamp_creation)
    affichage_date=date_creation_file.strftime("%d/%m/%Y √† %H:%M:%S")
    # Filter pour chargement des donn√©es
    with st.sidebar:
        st.subheader(" üîç Selection des donn√©es")
        # Options avec un choix vide
        options = [f"Dernier jeux de donn√©es le {affichage_date}", "Nouveau jeux de donn√©es"]
        choix = st.radio("S√©lectionner le mode de chargement :", options, index=0)
        st.markdown(
                "<hr style='border: none; height: 2px; background-color: blue;'>",unsafe_allow_html=True
        )     
        if(choix==f"Dernier jeux de donn√©es le {affichage_date}"):
            df = pd.read_excel(pathdatafile)
        else:
            df = load_data()
            filedest=script_dir / "datafile.xlsx"
            df.to_excel(filedest,index=False)
else:
    df = load_data()
    filedest=script_dir / "datafile.xlsx"
    df.to_excel(filedest,index=False)

# Cr√©er un masque pour les valeurs √† conserver
df["Domaine"] = df["Domaine"].astype(str).str.strip()
df["Responsable"] = df["Responsable"].astype(str).str.strip()
df["Activit√©"] = df["Activit√©"].astype(str).str.strip()

valeurs_exclues = ["nan", "NaN", "None", ""]

mask = (
    ~df["Domaine"].isin(valeurs_exclues) &
    ~df["Responsable"].isin(valeurs_exclues) &
    ~df["Activit√©"].isin(valeurs_exclues)
)
df = df[mask]

# Maj de certaines donnees
df['Statut']=df['Statut'].replace(["En cours d'execution","encours"],"En cours")
df["Date limite"] = pd.to_datetime(df["Date limite"], errors="coerce")
df["Tache"] = df["Tache"].astype(str).str.strip()
df["Taux r√©alisation"] = df["Taux r√©alisation"].astype(str).str.strip()
df.loc[df['Tache'].isin(["nan", "None", "NaN", ""]), 'Tache'] = 'UNDEFINED'
df.loc[df['Taux r√©alisation'].isin(["nan", "None", "NaN", ""]), 'Taux r√©alisation'] = 0
# Supprimer les doublons de ["responsable","domaine","activite","tache"]
df = df.drop_duplicates(subset=['Responsable', 'Domaine', 'Activit√©', 'Tache'], keep='first')

#df["Ann√©e"] = df["Date limite"].dt.year.fillna(0).astype(int)
# maj du statut et taux de realisation
df["Statut"] = df["Statut"].astype(str).str.strip()
df.loc[df['Statut'].isin(["nan", "None", "NaN", ""]) & (df['Taux r√©alisation'] == 0), 'Statut'] = 'En attente'
df.loc[df['Statut'].isin(["nan", "None", "NaN", ""]) & ((df['Taux r√©alisation'] > 0)&(df['Taux r√©alisation'] < 100)), 'Statut'] = 'En cours'
df.loc[df['Statut'].isin(["nan", "None", "NaN", ""]) & (df['Taux r√©alisation'] == 100), 'Statut'] = 'Termin√©e'
# st.dataframe(df)
# st.write("statut vide")
# st.dataframe(df[df['Statut'].isin(["nan", "NaN", "None", ""])])
# Sidebar
with st.sidebar:
    st.header("üîç Filtres")
    domaines = st.multiselect("Domaine", options=sorted(df["Domaine"].unique()))
    responsables = st.multiselect("Responsable", options=sorted(df["Responsable"].unique()))
    #annees = st.multiselect("P√©riode (Ann√©e)", options=sorted(df["Ann√©e"].unique()))
    statuts = st.multiselect("Statut", options=sorted(df["Statut"].unique()))

# Si aucun filtre s√©lectionn√©, on prend tout
mask = pd.Series(True, index=df.index)
if domaines:
    mask &= df["Domaine"].isin(domaines)
if responsables:
    mask &= df["Responsable"].isin(responsables)
#if annees:
#    mask &= df["Ann√©e"].isin(annees)
if statuts:
    mask &= df["Statut"].isin(statuts)

filtered_df = df[mask]

# Gestion du cas vide
if filtered_df.empty:
    st.warning("‚ö†Ô∏è Aucune donn√©e ne correspond aux filtres s√©lectionn√©s.")
    st.stop()

# Vue hi√©rarchique Activit√© > T√¢che
activites = filtered_df.groupby(["Responsable","Domaine","Activit√©"]).agg(
    T√¢ches_totales=("Tache", "count"),
    T√¢ches_realisees=("Statut", lambda x: (x == "Termin√©e").sum()),
    T√¢ches_en_cours=("Statut", lambda x: (x == "En cours").sum()),
    T√¢ches_en_attente=("Statut", lambda x: (x == "En attente").sum()),
    Date_limite=("Date limite", "max")
).reset_index()
# st.write("xxxxx")
# st.dataframe(activites)
# st.write(activites[["T√¢ches_totales","T√¢ches_realisees","T√¢ches_en_cours","T√¢ches_en_attente"]].sum(axis=0))
activites["Taux r√©alisation"] = round(100 * activites["T√¢ches_realisees"] / activites["T√¢ches_totales"], 1)

conditions = [
    activites['T√¢ches_totales'] == activites['T√¢ches_realisees'],
    activites['T√¢ches_totales'] == activites['T√¢ches_en_attente']
]
choices = ["Termin√©e","En attente"]

activites['Statut'] = np.select(conditions, choices, default="En cours")

#st.write("activites processed: ",activites)

# st.markdown("##### üìã Activit√©s en fonction des filtres")
nwactivites=activites.drop(["T√¢ches_totales","T√¢ches_realisees","T√¢ches_en_cours","T√¢ches_en_attente"],axis=1)
vizAggrid(nwactivites,"üìä Tableau des activit√©s")
st.markdown(
    "<hr style='border: none; height: 2px; background-color: blue;'>",
    unsafe_allow_html=True
)      

# üéØ Statistiques globales
st.markdown("##### üìã Les KPI")
col1, col2, col3, col4, col5 = st.columns(5)
col1.metric("üß© Total Activit√©s", activites.shape[0])
col2.metric("‚úÖ Activit√©s Termin√©es", (activites["Taux r√©alisation"] == 100).sum())
col3.metric("‚úÖ Activit√©s En cours", (activites[activites["Statut"] == "En cours"].shape[0]))
col4.metric("‚è∞ Activit√©s en Retard", ((activites["Date_limite"].dt.tz_localize(None) < pd.Timestamp.today()) & (activites["Taux r√©alisation"] < 100)).sum())
col5.metric("‚è∞ Activit√©s en Attente", (activites[activites["Statut"] == "En attente"].shape[0]))
# üì• Export Excel
# with st.expander("‚¨áÔ∏è T√©l√©charger les donn√©es filtr√©es"):
#     output = io.BytesIO()
#     activites.to_excel(output, index=False)
#     st.download_button("T√©l√©charger en Excel", data=output.getvalue(), file_name="activites_filtrees.xlsx")

st.markdown(
    "<hr style='border: none; height: 2px; background-color: blue;'>",
    unsafe_allow_html=True
    )      


# Graphique 1 : Activit√©s par domaine
st.subheader("üìå Nombre d'Activit√©s par Domaine")
activites["Domaine-trq"] = activites["Domaine"].apply(tronquer)
fig_domaine = px.bar(
    activites.groupby(["Domaine-trq","Statut"]).size().reset_index(name="Nombre d'activit√©s"),
    x="Domaine-trq", y="Nombre d'activit√©s", 
    text_auto=True, color="Statut",
    labels={'Domaine-trq': 'Domaine'},
    width=800,height=500,
    color_discrete_map={"Termin√©e": "#2ca02c", "En cours": "#Cca02c"},
)
st.plotly_chart(fig_domaine, use_container_width=True)

# Graphique 2 : Activit√©s par responsable
st.subheader("üìå Nombre d'Activit√©s par Rsponsable")
activites["Resp-trq"] = activites["Responsable"].apply(tronquer)
fig_resp = px.bar(
    activites.groupby(["Resp-trq","Statut"]).size().reset_index(name="Nombre d'activit√©s"),
    x="Resp-trq", y="Nombre d'activit√©s", 
    text_auto=True, color="Statut",
    labels={'Resp-trq': 'Responsable'},
    width=800,height=500,
    color_discrete_map={"Termin√©e": "#2ca02c", "En cours": "#Cca02c"},
)
st.plotly_chart(fig_resp, use_container_width=True)

# Graphique 3 : R√©partition des activites par statuts
if  not ((filtered_df["Tache"]=="Sans t√¢che").all()):
    st.subheader("üìã R√©partition des Activites par Statut")
    fig_statut = px.histogram(
        activites.groupby(["Statut"]).size().reset_index(name="Nombre d'activit√©s"), 
        x="Statut", y="Nombre d'activit√©s",
        text_auto=True, color="Statut", barmode="group",
        color_discrete_map={"Termin√©e": "#2ca02c", "En cours": "#Cca02c"},
        )
    fig_statut.update_traces(textposition='outside')
    st.plotly_chart(fig_statut, use_container_width=True)

# Graphique 4 : Taux d'ex√©cution

activites["libell√© activit√©"] = activites["Activit√©"].apply(tronquer)
activites_filtrees = activites[activites["Taux r√©alisation"] > 0]
if len(activites_filtrees)!=0:
    st.subheader("‚úÖ Taux de r√©alisation des Activit√©s(taux > 0)")
    fig_exec = px.bar(
        #activites_filtrees.sort_values("Taux r√©alisation", ascending=False),
        activites_filtrees,
        y="Taux r√©alisation", x="libell√© activit√©", orientation="v", 
        text_auto=True,color_continuous_scale="#2ca02c"
    )
    fig_exec.update_layout(xaxis_tickangle=45)
    st.plotly_chart(fig_exec, use_container_width=True)

# Graphique 5 : Activit√©s en retard
#st.subheader("‚è≥ Activit√©s en Retard")
# enlever la TZ de date imite pour la comparer avec timestamp.today()
activites["Date_limite"] = activites["Date_limite"].dt.tz_localize(None)
retard = activites[
    (activites["Date_limite"] < pd.Timestamp.today()) &
    (activites["Taux r√©alisation"] < 100)
]

if not retard.empty:
    if retard["Taux r√©alisation"].sum()==0:
        nwretard=retard[["Responsable","Domaine","Activit√©","Date_limite","Taux r√©alisation","Statut"]]
        vizAggrid(nwretard,"‚è≥ Activit√©s en Retard")
    else:    
        retard["libell√© activit√©"] = retard["Activit√©"].apply(tronquer)
        fig_retard = px.bar(
            retard,
            x="libell√© activit√©", y="Taux r√©alisation", color="Domaine", color_continuous_scale='Viridis'
        )
        st.plotly_chart(fig_retard, use_container_width=True)
else:
    st.success("üéâ Aucune activit√© en retard selon les filtres OU donn√©es de suivi non renseign√©es")

import altair as alt

# Exemple de donn√©es
mydata = pd.DataFrame({
    'Activit√©': ['Achat Serveur', 'Maintenance R√©seau', 'Formation √©quipe', 'D√©ploiement Cloud'],
    'Montant': [5000, 2000, 1500, 7000],
    '√âch√©ance': pd.to_datetime(['2025-05-01', '2025-04-20', '2025-05-15', '2025-04-25'])
})

# Tri par date d‚Äô√©ch√©ance
data = mydata.sort_values('√âch√©ance')

mychart = alt.Chart(data).mark_bar().encode(
    x=alt.X('√âch√©ance:T', title="Date d'√©ch√©ance"),
    y=alt.Y('Montant:Q'),
    color=alt.Color('Activit√©', legend=None),
    tooltip=['Activit√©', 'Montant', '√âch√©ance']
).properties(
    title="Montants par activit√© et date d‚Äô√©ch√©ance"
)

st.altair_chart(mychart, use_container_width=True)